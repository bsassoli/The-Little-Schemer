#lang racket/base

(require rackunit rackunit/text-ui "../src/ch4.rkt")
(provide ch4-tests)

(define ch4-tests
  (test-suite
   "ch4 tests"
   (check-equal? (∔ 5 7) 12)
   (check-equal?(∸ 7 5) 2)
   (check-equal? (addtup '(2 3 4)) 9)
   (check-equal? (⨰ 3 1) 3)
   (check-equal? (⨰ 3 5) 15)
   (check-false (> 5 7))
   (check-false (> 5 5))
   (check-true (> 12 7))
   (check-true (< 5 7))
   (check-false (< 5 5))
   (check-false (< 12 7))
   (check-true (= 5 5))
   (check-true (= 0 0))
   (check-false (= 5 6))
   (check-false (= 6 5))
   (check-equal? († 2 0) 1)              
   (check-equal? († 3 2) 9)
   (check-equal? († 2 3) 8)
   (check-equal? (÷ 15 3) 5)
   (check-equal? (÷ 15 25) 0)
   (check-equal? (length '(apple orange pie)) 3)
   (check-equal? (length '(apple)) 1)
   (check-equal? (pick 3 '(orange apple banana strawberry)) 'banana)
   (check-equal? (no-nums '(2 3 apple orange 6 8 strawberry)) '(apple orange strawberry))
   (check-true (eqan? 4 4))
   (check-false (eqan? 3 2))
   (check-false (eqan? 'apple 2))
   (check-true (eqan? 'apple 'apple))
   (check-false (eqan? 'apples 'oranges))
   (check-equal? (occur 3 '(3 orange 3 apple 1)) 2)
   (check-equal? (occur 'mango '(apple orange straberry apple apple)) 0)
   (check-equal? (occur 'apple '(apple orange straberry apple apple)) 3)
   (check-true (one? 1))
   (check-false (one? 4))
   (check-equal? (rempick 3 '(orange apple banana strawberry)) '(orange apple strawberry))))